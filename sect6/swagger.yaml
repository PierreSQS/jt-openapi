openapi: 3.0.2
info:
  version: '1.0'
  title: JT OpenApi Course
  termsOfService: http://example.com/terms/
  contact:
    name: John Thompson
    url: https://springframework.guru
    email: john@springframework.guru
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
- url: https://dev.example.com
  description: Development Server
- url: https://qa.example.com
  description: QA Server
- url: https://prod.example.com
  description: Production Server
paths:
  /v1/customers:
    get:
      parameters: 
        - name: pageNumber
          in: query
          description: Page Number
          schema:
            type: integer
            format: int32
            default: 1
        - name: pageSize
          in: query
          description: Page Size
          required: false
          schema:
            type: integer
            format: int32
            default: 25
      responses:
        200:
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPagedList'

  /v1/beers:
    get:
      responses:
        200:
          description: Paged List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
        404:
          description: No Beers Found
components: 
  schemas:
    Address:
      type: object
      description: Address Object
      properties:
        line1:
          type: string
          example: 10 Rue Manga Bell
        city:
          type: string
          example: Douala
        zipCode:
          type: string
          example: 5555
        stateCode:
          type: string
          enum: [OCE,WOU,NDE,SAN,NTE] 
    Customer:
      type: object
      description: Customer Object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
          example: Pierrot
        lastName:
          type: string
          example: Mongonnam
        Address:
          $ref: "#/components/schemas/Address"
    CustomerList:
      type: array
      maxItems: 100
      minItems: 1
      description: "List of customers"
      items:
        allOf:
          - maxLength: 100
          - minLength: 2
          - $ref: "#/components/schemas/Customer"
          
    Brewery:
      type: object
      description: Brewery Object
      properties:
        name:
          type: string
          example: UCB
        location:
          type: string
          example: Douala-Bonandjo
    
    Beer:
      type: object
      description: Beer Object
      properties:
        beerName:
          type: string
        style:
          type: string
        upc:
          type: string
          enum: [ALE, PALE_ALE, IPA, WHEAT, LAGER]
        price:
          type: number
          format: float
          example: 25.4
        qtyOnHand:
          description: quantity on Hand
          type: integer
          format: int32
          example: 3,450
        brewery:
          $ref: "#/components/schemas/Brewery"
          
    BeerList:
      type: array
      description: Beer List
      items:
        $ref: "#/components/schemas/Beer"
        
    BeerPagedList:
      type: object
      description: Paged Beer List
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/BeerList"
        
    CustomerPagedList:
      type: object
      description: Paged CustomerList
      properties:
        content:
          $ref: '#/components/schemas/CustomerList'
      allOf:
        - $ref: '#/components/schemas/PagedResponse'    
    
    PagedResponse:
      type: object
      description: Paged Response Object
      properties:
        pageable:
          $ref: '#/components/schemas/PagedResponse_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
          
    PagedResponse_pageable_sort:
      type: object
      description: pageable PagedResponse Sort
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
          
    PagedResponse_pageable:
      type: object
      description: pageable PagedResponse Object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean